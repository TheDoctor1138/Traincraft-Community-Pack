

buildscript {
    repositories {

        maven {
            url "https://repo1.maven.org/maven2" 
        }

        maven {
            name = "forge"
           url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }

    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'
apply plugin: 'idea'


sourceCompatibility = targetCompatibility = "1.7"
compileJava { sourceCompatibility = targetCompatibility = "1.7" }

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

configurations {
    embedded
    implementation.extendsFrom embedded
}

def commonManifest = {
    attributes FMLCorePlugin: "li.cil.oc.common.launch.TransformerLoader"
    attributes FMLCorePluginContainsFMLMod: "true"
    attributes FMLAT: "oc_at.cfg"
}

version = config.modVersion.toString()
group= "src.train" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TC-Community-Pack"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
    replaceIn "TCCEAddonInfo.java"
    replace "@VERSION1@", config.modVersion.toString()
}

//task packApi(type: Jar, dependsOn: "classes") {
 //   // Jar will always be updated
   // outputs.upToDateWhen {false}
    // Set the jar's base name
   // baseName = "Traincraft"

    //from (sourceSets.main.output) {
      //  excludes.addAll('**/*.info')
        //excludes.addAll('assets/tc/textures/trains')
        //excludes.addAll('assets/tc/sounds')
   // }
//}


task buildSubmoduleJar(type: GradleBuild) {
    description = 'Builds the JAR from the submodule'
    dir = 'submodules/Traincraft' // Adjust this path to match your submodule location
    tasks = ['clean', 'packapi']
}

task copySubmoduleJar(type: Copy, dependsOn: buildSubmoduleJar) {
    description = 'Copies the JAR from the submodule to the main repository'
    from 'submodules/Traincraft/build/libs' // The directory where the submodule's JAR is located
    into 'lib' // The destination directory in the main repository
    include '*.jar'
}

task getTrainAPI(dependsOn: copySubmoduleJar) {
    description = 'Builds the JAR from the submodule and copies it to the main repository'
    group = 'build'
}



repositories {
	maven {
		name "gt"
		url "https://gregtech.overminddl1.com/"
	}
	maven {
		name "codechicken"
		url "https://maven.cil.li/"
	}
        flatDir {
            dirs "lib"
        }
    maven {
        name "curse.maven"
        url "https://cursemaven.com"
    }
	ivy {
		name "BuildCraft"
		artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
	}


}

dependencies {
	// `compile` will compile it and run with `runClient`/`runServer`
    // `compileOnly will only compile but not load in dev testing (can still put in the instance mods directory though)
	compileOnly "li.cil.oc:OpenComputers:MC1.7.10-1.7.2.1204:dev"
	compileOnly "com.mod-buildcraft:buildcraft:7.1.23:dev"
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.136:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.4.90:dev"
    implementation "train:Traincraft-4.4.1_020-CE_7.1"
    
    // quality of life line to simplify importing jars for experimental testing
    compile fileTree(dir: 'lib', include: ['*.jar'])
}

idea
{
	module
	{
		inheritOutputDirs = true
	}
}